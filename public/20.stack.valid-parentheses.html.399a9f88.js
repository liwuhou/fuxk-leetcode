import{r as t,o as e,c as o,a as n,b as p,F as c,d as s,e as r}from"./app.3ab3c8b6.js";import{_ as l}from"./plugin-vue_export-helper.db8f5083.js";const u={},i=n("h1",{id:"\u6709\u6548\u7684\u62EC\u53F7",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u6709\u6548\u7684\u62EC\u53F7","aria-hidden":"true"},"#"),s(" \u6709\u6548\u7684\u62EC\u53F7")],-1),k={href:"https://leetcode-cn.com/problems/valid-parentheses",target:"_blank",rel:"noopener noreferrer"},b=s("leetcode \u539F\u9898\uFF1A20.valid parentheses"),d=r(`<details class="custom-container details"><summary>\u9898\u76EE\u63CF\u8FF0</summary><p>\u7ED9\u5B9A\u4E00\u4E2A\u53EA\u5305\u62EC &#39;(&#39;\uFF0C&#39;)&#39;\uFF0C&#39;{&#39;\uFF0C&#39;}&#39;\uFF0C&#39;[&#39;\uFF0C&#39;]&#39;\xA0\u7684\u5B57\u7B26\u4E32 s \uFF0C\u5224\u65AD\u5B57\u7B26\u4E32\u662F\u5426\u6709\u6548\u3002</p><p>\u6709\u6548\u5B57\u7B26\u4E32\u9700\u6EE1\u8DB3\uFF1A</p><p>\u5DE6\u62EC\u53F7\u5FC5\u987B\u7528\u76F8\u540C\u7C7B\u578B\u7684\u53F3\u62EC\u53F7\u95ED\u5408\u3002 \u5DE6\u62EC\u53F7\u5FC5\u987B\u4EE5\u6B63\u786E\u7684\u987A\u5E8F\u95ED\u5408\u3002</p><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><blockquote><p>\u8F93\u5165\uFF1As = &quot;()&quot;</p><p>\u8F93\u51FA\uFF1Atrue</p></blockquote><p><strong>\u793A\u4F8B\xA02\uFF1A</strong></p><blockquote><p>\u8F93\u5165\uFF1As = &quot;()[]{}&quot;</p><p>\u8F93\u51FA\uFF1Atrue</p></blockquote><p><strong>\u793A\u4F8B\xA03\uFF1A</strong></p><blockquote><p>\u8F93\u5165\uFF1As = &quot;(]&quot;</p><p>\u8F93\u51FA\uFF1Afalse</p></blockquote><p><strong>\u793A\u4F8B\xA04\uFF1A</strong></p><blockquote><p>\u8F93\u5165\uFF1As = &quot;([)]&quot;</p><p>\u8F93\u51FA\uFF1Afalse</p></blockquote><p><strong>\u793A\u4F8B\xA05\uFF1A</strong></p><blockquote><p>\u8F93\u5165\uFF1As = &quot;{[]}&quot;</p><p>\u8F93\u51FA\uFF1Atrue</p></blockquote></details><p><strong>\u63D0\u793A\uFF1A</strong></p><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s</code> \u4EC5\u7531\u62EC\u53F7 <code>&#39;()[]{}&#39;</code> \u7EC4\u6210</li></ul><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Stack <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@structure&#39;</span>\r
\r
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">validParentheses</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\r
  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\r
  <span class="token keyword">const</span> bracketMap <span class="token operator">=</span> <span class="token punctuation">{</span>\r
    <span class="token string-property property">&#39;)&#39;</span><span class="token operator">:</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">,</span>\r
    <span class="token string-property property">&#39;}&#39;</span><span class="token operator">:</span> <span class="token string">&#39;{&#39;</span><span class="token punctuation">,</span>\r
    <span class="token string-property property">&#39;]&#39;</span><span class="token operator">:</span> <span class="token string">&#39;[&#39;</span><span class="token punctuation">,</span>\r
    <span class="token string-property property">&#39;&gt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span>\r
  <span class="token punctuation">}</span>\r
\r
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> bracketMap<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r
      stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\r
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\r
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\r
    <span class="token punctuation">}</span>\r
  <span class="token punctuation">}</span>\r
\r
  <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\r
<span class="token punctuation">}</span>\r
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>`,4),m=n("code",null,"Stack",-1),g=s(" \u7684\u5B9E\u73B0\u770B\u8FD9\u8FB9 \u2014\u2014 "),_={href:"/structure/stack.html",target:"_blank",rel:"noopener noreferrer"},h=s("\u6570\u636E\u7ED3\u6784\uFF1A\u6808");function y(f,q){const a=t("ExternalLinkIcon");return e(),o(c,null,[i,n("p",null,[n("a",k,[b,p(a)])]),d,n("p",null,[m,g,n("a",_,[h,p(a)])])],64)}var x=l(u,[["render",y]]);export{x as default};
