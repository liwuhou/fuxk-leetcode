import{r as p,o as e,c as t,a as n,b as o,F as r,d as s,e as l}from"./app.3ab3c8b6.js";import{_ as c}from"./plugin-vue_export-helper.db8f5083.js";const u={},i=n("h1",{id:"\u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868",tabindex:"-1"},[n("a",{class:"header-anchor",href:"#\u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868","aria-hidden":"true"},"#"),s(" \u5408\u5E76\u4E24\u4E2A\u6709\u5E8F\u94FE\u8868")],-1),k={href:"https://leetcode-cn.com/problems/merge-two-sorted-lists",target:"_blank",rel:"noopener noreferrer"},b=s("leetcode \u539F\u9898\uFF1A21.merge two sorted lists"),m=l(`<details class="custom-container details"><summary>\u9898\u76EE\u63CF\u8FF0</summary><p>\u5C06\u4E24\u4E2A\u5347\u5E8F\u94FE\u8868\u5408\u5E76\u4E3A\u4E00\u4E2A\u65B0\u7684 \u5347\u5E8F \u94FE\u8868\u5E76\u8FD4\u56DE\u3002\u65B0\u94FE\u8868\u662F\u901A\u8FC7\u62FC\u63A5\u7ED9\u5B9A\u7684\u4E24\u4E2A\u94FE\u8868\u7684\u6240\u6709\u8282\u70B9\u7EC4\u6210\u7684\u3002</p><p><strong>\u793A\u4F8B 1\uFF1A</strong></p><p><img src="http://cdn.liwuhou.cn/tmp/20220216232306.png" alt="\u793A\u4F8B 1"></p><blockquote><p><strong>\u8F93\u5165\uFF1A</strong> l1 = [1,2,4], l2 = [1,3,4]</p><p><strong>\u8F93\u51FA\uFF1A</strong> [1,1,2,3,4,4]</p></blockquote><p><strong>\u793A\u4F8B 2\uFF1A</strong></p><blockquote><p><strong>\u8F93\u5165\uFF1A</strong> l1 = [], l2 = []</p><p><strong>\u8F93\u51FA\uFF1A</strong> []</p></blockquote><p><strong>\u793A\u4F8B 3\uFF1A</strong></p><blockquote><p><strong>\u8F93\u5165\uFF1A</strong> l1 = [], l2 = [0]</p><p><strong>\u8F93\u51FA\uFF1A</strong> [0]</p></blockquote><p><strong>\u63D0\u793A</strong></p><ul><li>\u4E24\u4E2A\u94FE\u8868\u7684\u8282\u70B9\u6570\u76EE\u8303\u56F4\u662F [0, 50]</li><li>-100 &lt;= Node.val &lt;= 100</li><li>l1 \u548C l2 \u5747\u6309 \u975E\u9012\u51CF\u987A\u5E8F \u6392\u5217</li></ul></details><p>\u5229\u7528 <code>while</code> \u5FAA\u73AF\u904D\u5386\u4E24\u4E2A\u94FE\u8868\uFF0C\u6BD4\u8F83\u73B0\u4E2A\u94FE\u8868\u7684\u6BCF\u4E2A\u8282\u70B9\uFF0C\u5C06\u94FE\u8868\u6309\u5E8F\u91CD\u65B0\u6392\u5217\uFF1A</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> ListNode <span class="token keyword">from</span> <span class="token string">&#39;../structure/Linked-List&#39;</span>\r
\r
<span class="token keyword">type</span> <span class="token class-name">IListNode</span> <span class="token operator">=</span> ListNode<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span>\r
\r
<span class="token keyword">export</span> <span class="token keyword">function</span> <span class="token function">mergeTwoLists</span><span class="token punctuation">(</span>\r
  list1<span class="token operator">:</span> IListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\r
  list2<span class="token operator">:</span> IListNode <span class="token operator">|</span> <span class="token keyword">null</span><span class="token punctuation">,</span>\r
<span class="token punctuation">)</span><span class="token operator">:</span> IListNode <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>\r
  <span class="token keyword">let</span> dump<span class="token operator">:</span> IListNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>\r
  <span class="token keyword">let</span> curr <span class="token operator">=</span> dump\r
  <span class="token keyword">let</span> p1 <span class="token operator">=</span> list1<span class="token punctuation">,</span>\r
    p2 <span class="token operator">=</span> list2\r
\r
  <span class="token keyword">while</span> <span class="token punctuation">(</span>p1 <span class="token operator">&amp;&amp;</span> p2<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r
    <span class="token keyword">if</span> <span class="token punctuation">(</span>p1<span class="token punctuation">.</span>value <span class="token operator">&lt;</span> p2<span class="token punctuation">.</span>value<span class="token punctuation">)</span> <span class="token punctuation">{</span>\r
      curr<span class="token punctuation">.</span>next <span class="token operator">=</span> p1\r
      p1 <span class="token operator">=</span> p1<span class="token punctuation">.</span>next\r
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\r
      curr<span class="token punctuation">.</span>next <span class="token operator">=</span> p2\r
      p2 <span class="token operator">=</span> p2<span class="token punctuation">.</span>next\r
    <span class="token punctuation">}</span>\r
    curr <span class="token operator">=</span> curr<span class="token punctuation">.</span>next\r
  <span class="token punctuation">}</span>\r
\r
  <span class="token keyword">if</span> <span class="token punctuation">(</span>p1 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r
    curr<span class="token punctuation">.</span>next <span class="token operator">=</span> p1\r
  <span class="token punctuation">}</span>\r
  <span class="token keyword">if</span> <span class="token punctuation">(</span>p2 <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r
    curr<span class="token punctuation">.</span>next <span class="token operator">=</span> p2\r
  <span class="token punctuation">}</span>\r
\r
  <span class="token keyword">return</span> dump<span class="token punctuation">.</span>next\r
<span class="token punctuation">}</span>\r
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br></div></div>`,3);function d(g,w){const a=p("ExternalLinkIcon");return e(),t(r,null,[i,n("p",null,[n("a",k,[b,o(a)])]),m],64)}var h=c(u,[["render",d]]);export{h as default};
