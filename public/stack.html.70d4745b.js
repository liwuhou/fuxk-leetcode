import{e as n}from"./app.3ab3c8b6.js";import{_ as s}from"./plugin-vue_export-helper.db8f5083.js";const a={},p=n(`<h1 id="\u6808" tabindex="-1"><a class="header-anchor" href="#\u6808" aria-hidden="true">#</a> \u6808</h1><p>\u6808\u7ED3\u6784\u7684\u7279\u70B9\u975E\u5E38\u5730\u6709\u7279\u70B9\uFF1A\u5148\u8FDB\u540E\u51FA\uFF0C\u540E\u8FDB\u5148\u51FA(Last In First Out, LIFO)\u3002\u53EF\u4EE5\u628A\u6808\u60F3\u8C61\u6210\u4E00\u4E2A\u7FBD\u6BDB\u7403\u7B52\uFF0C\u800C\u6211\u4EEC\u7684\u6570\u636E\u5C31\u662F\u4E00\u4E2A\u4E2A\u8FDB\u51FA\u7684\u7FBD\u6BDB\u7403\u3002</p><p><img src="http://cdn.liwuhou.cn/tmp/20220415090905.png" alt=""></p><p>\u7531\u4E8E\u7FBD\u6BDB\u7403\u7B52\u53EA\u6709\u4E00\u7AEF\u662F\u53EF\u4EE5\u8FDB\u51FA\u7684\uFF0C\u53E6\u4E00\u7AEF\u662F\u5C01\u95ED\u7684\uFF0C\u8FD9\u5C31\u5BFC\u81F4\u7FBD\u6BDB\u7403\u53EA\u6709\u4EE5\u4E00\u79CD\u65B9\u5F0F\u8FDB\u51FA\uFF0C\u6700\u5916\u9762\u7684\u6700\u5148\u51FA\u53BB\uFF0C\u6700\u91CC\u9762\u7684\u6700\u665A\u51FA\u6765\u3002</p><p><img src="http://cdn.liwuhou.cn/tmp/20220415091454.png" alt=""></p><p>\u6808\u8FD9\u79CD\u5B58\u53D6\u53D7\u9650\u7684\u6570\u636E\u7ED3\u6784\uFF0C\u5BF9\u6570\u636E\u7684\u64CD\u4F5C\u53EA\u6709\u5165\u6808\u548C\u51FA\u6808\uFF08\u6E05\u7A7A\uFF09\u4E24\u79CD\u65B9\u6CD5\u3002</p><p><strong>push</strong>\uFF1A\u8FDB\u6808\u65B9\u6CD5\uFF0C\u5411\u6808\u672B\u5C3E\u6DFB\u52A0\u5143\u7D20</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>

stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br></div></div><p><strong>pop</strong>: \u51FA\u6808\u65B9\u6CD5\uFF0C\u5F39\u51FA\u6808\u672B\u5C3E\u7684\u4E00\u4E2A\u5143\u7D20\u3002</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code>stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">// 1</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br></div></div><p>\u5B9E\u73B0\u4E00\u4E2A\u6808</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">class</span> <span class="token class-name">Stack<span class="token operator">&lt;</span><span class="token constant">T</span> <span class="token operator">=</span> <span class="token builtin">any</span><span class="token operator">&gt;</span></span> <span class="token punctuation">{</span>\r
  #stack<span class="token operator">:</span> Record<span class="token operator">&lt;</span><span class="token builtin">number</span><span class="token punctuation">,</span> <span class="token constant">T</span><span class="token operator">&gt;</span>\r
  length<span class="token operator">:</span> <span class="token builtin">number</span>\r
\r
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r
    <span class="token keyword">this</span><span class="token punctuation">.</span>#stack <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\r
    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>\r
  <span class="token punctuation">}</span>\r
\r
  <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#stack\r
  <span class="token punctuation">}</span>\r
\r
  <span class="token function">push</span><span class="token punctuation">(</span>val<span class="token operator">:</span> <span class="token constant">T</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>\r
    <span class="token keyword">this</span><span class="token punctuation">.</span>#stack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> val\r
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length\r
  <span class="token punctuation">}</span>\r
\r
  <span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token punctuation">{</span>\r
    <span class="token keyword">const</span> tmp <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#stack<span class="token punctuation">[</span><span class="token operator">--</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span>\r
    <span class="token keyword">delete</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#stack<span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span>\r
    <span class="token keyword">return</span> tmp\r
  <span class="token punctuation">}</span>\r
\r
  <span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token constant">T</span> <span class="token operator">|</span> <span class="token keyword">null</span> <span class="token punctuation">{</span>\r
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>#stack<span class="token operator">?.</span><span class="token punctuation">[</span><span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">??</span> <span class="token keyword">null</span>\r
  <span class="token punctuation">}</span>\r
\r
  <span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\r
    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">===</span> <span class="token number">0</span>\r
  <span class="token punctuation">}</span>\r
\r
  <span class="token function">clear</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r
    <span class="token keyword">this</span><span class="token punctuation">.</span>#stack <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>\r
    <span class="token keyword">this</span><span class="token punctuation">.</span>length <span class="token operator">=</span> <span class="token number">0</span>\r
  <span class="token punctuation">}</span>\r
<span class="token punctuation">}</span>\r
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br><span class="line-number">22</span><br><span class="line-number">23</span><br><span class="line-number">24</span><br><span class="line-number">25</span><br><span class="line-number">26</span><br><span class="line-number">27</span><br><span class="line-number">28</span><br><span class="line-number">29</span><br><span class="line-number">30</span><br><span class="line-number">31</span><br><span class="line-number">32</span><br><span class="line-number">33</span><br><span class="line-number">34</span><br><span class="line-number">35</span><br><span class="line-number">36</span><br><span class="line-number">37</span><br></div></div><p>\u53EF\u4EE5\u5229\u7528\u6808\u8FDB\u51FA\u53EA\u4ECE\u4E00\u7AEF\u7684\u7279\u70B9\u5B9E\u73B0\u4E00\u4E9B\u529F\u80FD\uFF0C\u6BD4\u5982\u5B9E\u73B0\u4E00\u4E2A\u5341\u8FDB\u5236\u8F6C\u4E3A\u4EFB\u610F\u8FDB\u5236\u7684\u65B9\u6CD5</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">function</span> <span class="token function">converter</span><span class="token punctuation">(</span><span class="token builtin">number</span><span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">,</span> base<span class="token operator">:</span> <span class="token builtin">number</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">number</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token keyword">const</span> digits <span class="token operator">=</span> <span class="token string">&#39;0123456789ABCDEF&#39;</span>
  <span class="token keyword">let</span> result <span class="token operator">=</span> <span class="token string">&#39;&#39;</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token operator">&gt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token operator">%</span> base<span class="token punctuation">)</span>
    <span class="token builtin">number</span> <span class="token operator">=</span> Math<span class="token punctuation">.</span><span class="token function">floor</span><span class="token punctuation">(</span><span class="token builtin">number</span> <span class="token operator">/</span> bs<span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    result <span class="token operator">+=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">return</span> result
<span class="token punctuation">}</span>
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br></div></div><p>\u4E5F\u53EF\u4EE5\u5B9E\u73B0\u4E00\u4E2A\u68C0\u9A8C\u62EC\u53F7\u662F\u5426\u6B63\u786E\u95ED\u5408\u7684\u65B9\u6CD5</p><div class="language-typescript ext-ts line-numbers-mode"><pre class="language-typescript"><code><span class="token keyword">import</span> <span class="token punctuation">{</span> Stack <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">&#39;@structure&#39;</span>\r
\r
<span class="token keyword">export</span> <span class="token keyword">default</span> <span class="token keyword">function</span> <span class="token function">validParentheses</span><span class="token punctuation">(</span>str<span class="token operator">:</span> <span class="token builtin">string</span><span class="token punctuation">)</span><span class="token operator">:</span> <span class="token builtin">boolean</span> <span class="token punctuation">{</span>\r
  <span class="token keyword">const</span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack<span class="token operator">&lt;</span><span class="token builtin">string</span><span class="token operator">&gt;</span></span><span class="token punctuation">(</span><span class="token punctuation">)</span>\r
  <span class="token keyword">const</span> bracketMap <span class="token operator">=</span> <span class="token punctuation">{</span>\r
    <span class="token string-property property">&#39;)&#39;</span><span class="token operator">:</span> <span class="token string">&#39;(&#39;</span><span class="token punctuation">,</span>\r
    <span class="token string-property property">&#39;}&#39;</span><span class="token operator">:</span> <span class="token string">&#39;{&#39;</span><span class="token punctuation">,</span>\r
    <span class="token string-property property">&#39;]&#39;</span><span class="token operator">:</span> <span class="token string">&#39;[&#39;</span><span class="token punctuation">,</span>\r
    <span class="token string-property property">&#39;&gt;&#39;</span><span class="token operator">:</span> <span class="token string">&#39;&lt;&#39;</span><span class="token punctuation">,</span>\r
  <span class="token punctuation">}</span>\r
\r
  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">let</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> str<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r
    <span class="token keyword">if</span> <span class="token punctuation">(</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">===</span> bracketMap<span class="token punctuation">[</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>\r
      stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\r
    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>\r
      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>str<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>\r
    <span class="token punctuation">}</span>\r
  <span class="token punctuation">}</span>\r
\r
  <span class="token keyword">return</span> stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\r
<span class="token punctuation">}</span>\r
</code></pre><div class="line-numbers"><span class="line-number">1</span><br><span class="line-number">2</span><br><span class="line-number">3</span><br><span class="line-number">4</span><br><span class="line-number">5</span><br><span class="line-number">6</span><br><span class="line-number">7</span><br><span class="line-number">8</span><br><span class="line-number">9</span><br><span class="line-number">10</span><br><span class="line-number">11</span><br><span class="line-number">12</span><br><span class="line-number">13</span><br><span class="line-number">14</span><br><span class="line-number">15</span><br><span class="line-number">16</span><br><span class="line-number">17</span><br><span class="line-number">18</span><br><span class="line-number">19</span><br><span class="line-number">20</span><br><span class="line-number">21</span><br></div></div>`,16);function t(e,o){return p}var r=s(a,[["render",t]]);export{r as default};
